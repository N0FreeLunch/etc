프론트 앤드

프론트 앤드 - 백앤드 분리를 하는 이유

어플리케이션 : 유저가 데이터를 조작할 수 있는 인터페이스를 제공하는 것


이해 방식이 다르다.
유저 데이터 조작
컴퓨터에서 데이터 조작

유저의 데이터 조작을 중심으로 하는 설계 => 프론트 앤드

컴퓨터가 이해할 수 있도록 데이터를 조작하는 설계 => 백앤드


게임 : 클라이언트 - 게임서버
웹페이지 : 브라우저 페이지 - 웹서버


클라이언트 - (브라우저 + 웹 페이지)

브라우저
- 마크업 문서(HTML)를 보여주는 툴
- +마크업 문서를 예쁘게 보여준다. (CSS)
- +마크업 문서를 동적으로 표현하거나 데이터 조작을 한다. (JS)

구성 => HTML, CSS, JS

게임과 다른점
- 로컬에 게임 클라이언트 다운 (컨텐츠가 제한)

- 브라우저만 로컬에 다운
- 컨텐츠 서버에서 받는다 (컨텐츠가 졸라 많아서)


통신
- http 프로토콜을 통해서 통신한다.

http 프로토콜
- get : 요청을 했을 때 결과를 가져오는 것 => 페이지를 요청하면 HTML 문서를 받는 것 (서버에서 뭔가를 반드시 받아야 됨)
- post : 요청만 하는 것 => 데이터를 입력하라 => 결과값은 옵션


http 프로토콜의 결과값
- Header : 보이지 않는 값 (메타정보)
- Body : 보이는 정보 (HTML)

HTML
- 뭔가를 불러오는 태그 (CSS, JS, IMG ...)
- URL을 호출 => get 통신

HTML 페이지를 요청하는 이벤트를 발생 => HTML을 받아 옴
=> CSS를 요청하는 이벤트 발생 (get 요청) => CSS 받아 옴 => 실행
=> JS를 요청하는 이벤트 발생 (get 요청) => JS 받아 옴 => 실행

Header
- 캐시 전략 (브라우저 디폴트 세팅, 서버에서 캐싱 전략... 등등의 메타정보가 담긴다.)
- 세션 정보
- 쿠키 정보

Body
- HTML : HTML 문서
- JS : JS 코드
- IMG : 이미지의 바이너리 코드
